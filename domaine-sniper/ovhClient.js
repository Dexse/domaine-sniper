const ovh = require('ovh');
require('dotenv').config();

class OVHClient {
  constructor() {
    this.client = ovh({
      endpoint: 'ovh-eu',
      appKey: process.env.OVH_APP_KEY,
      appSecret: process.env.OVH_APP_SECRET,
      consumerKey: process.env.OVH_CONSUMER_KEY
    });
  }

  /**
   * V√©rifie si un domaine est disponible √† l'achat
   * @param {string} domain - Le nom de domaine √† v√©rifier
   * @returns {Promise<boolean>} - true si disponible, false sinon
   */
  async isDomainAvailable(domain) {
    try {
      console.log(`üîç V√©rification de la disponibilit√© de ${domain}...`);

      // Utiliser l'API de v√©rification de disponibilit√© OVH
      const result = await this.client.requestPromised('GET', `/domain/zone/${domain}/status`);

      // Si on arrive ici sans erreur, le domaine existe encore
      return false;

    } catch (error) {
      // Si erreur 404, le domaine n'existe pas = disponible
      if (error.error === 404 || error.message.includes('404')) {
        console.log(`‚úÖ ${domain} semble disponible (404)`);
        return true;
      }

      // Pour les autres erreurs, on consid√®re comme non disponible par s√©curit√©
      console.log(`‚ö†Ô∏è Erreur lors de la v√©rification de ${domain}:`, error.message);
      return false;
    }
  }

  /**
   * R√©cup√®re les informations d'expiration d'un domaine via WHOIS
   * @param {string} domain - Le nom de domaine
   * @returns {Promise<Object|null>} - Informations d'expiration ou null
   */
  async getDomainExpirationInfo(domain) {
    try {
      // Simulation d'informations WHOIS (√† remplacer par une vraie API WHOIS)
      const mockExpirationDate = new Date();
      mockExpirationDate.setDate(mockExpirationDate.getDate() + Math.floor(Math.random() * 365));

      const estimatedReleaseDate = new Date(mockExpirationDate);
      estimatedReleaseDate.setDate(estimatedReleaseDate.getDate() + 75); // +75 jours apr√®s expiration

      const daysUntilExpiry = Math.floor((mockExpirationDate - new Date()) / (1000 * 60 * 60 * 24));

      return {
        expiryDate: mockExpirationDate.toISOString(),
        estimatedReleaseDate: estimatedReleaseDate.toISOString(),
        daysUntilExpiry: daysUntilExpiry,
        registrar: 'Registrar Example'
      };
    } catch (error) {
      console.error(`Erreur lors de la r√©cup√©ration des infos WHOIS pour ${domain}:`, error.message);
      return null;
    }
  }

  /**
   * Ach√®te un domaine automatiquement
   * @param {string} domain - Le nom de domaine √† acheter
   * @returns {Promise<Object>} - R√©sultat de l'achat
   */
  async purchaseDomain(domain) {
    try {
      console.log(`üõí Tentative d'achat automatique pour ${domain}...`);

      // 1. Cr√©er un panier
      const cart = await this.client.requestPromised('POST', '/order/cart', {
        ovhSubsidiary: 'FR'
      });

      console.log(`üì¶ Panier cr√©√©: ${cart.cartId}`);

      // 2. Ajouter le domaine au panier
      const cartItem = await this.client.requestPromised('POST', `/order/cart/${cart.cartId}/domain`, {
        domain: domain,
        duration: 'P1Y' // 1 an
      });

      console.log(`‚ûï Domaine ajout√© au panier: ${cartItem.itemId}`);

      // 3. Valider le panier
      const order = await this.client.requestPromised('POST', `/order/cart/${cart.cartId}/checkout`);

      console.log(`‚úÖ Commande cr√©√©e: ${order.orderId}`);

      return {
        success: true,
        orderId: order.orderId,
        cartId: cart.cartId
      };

    } catch (error) {
      console.error(`‚ùå Erreur lors de l'achat de ${domain}:`, error);
      return {
        success: false,
        error: error.message || 'Erreur inconnue lors de l\'achat'
      };
    }
  }

  /**
   * R√©cup√®re le solde du compte OVH
   * @returns {Promise<Object>} - Informations sur le solde
   */
  async getAccountBalance() {
    try {
      console.log('üí∞ R√©cup√©ration du solde OVH...');

      // M√©thode 1: Essayer l'API du compte pr√©pay√© (plus fiable)
      try {
        const prepaidAccounts = await this.client.requestPromised('GET', '/me/prepaidAccount');
        console.log('‚úÖ Comptes pr√©pay√©s r√©cup√©r√©s:', prepaidAccounts);

        if (prepaidAccounts && prepaidAccounts.length > 0) {
          // Prendre le premier compte pr√©pay√© (g√©n√©ralement le principal)
          const accountId = prepaidAccounts[0];
          const accountDetails = await this.client.requestPromised('GET', `/me/prepaidAccount/${accountId}`);
          console.log('‚úÖ D√©tails du compte pr√©pay√©:', accountDetails);

          return {
            balance: parseFloat(accountDetails.balance || 0),
            currency: accountDetails.currency || 'EUR',
            method: 'prepaid_account'
          };
        }
      } catch (prepaidError) {
        console.log('‚ö†Ô∏è Erreur avec /me/prepaidAccount:', prepaidError.message);
      }

      // M√©thode 2: Essayer l'API de facturation
      try {
        const balance = await this.client.requestPromised('GET', '/me/bill/balance');
        console.log('‚úÖ Solde r√©cup√©r√© via /me/bill/balance:', balance);
        return {
          balance: parseFloat(balance.balance || 0),
          currency: balance.currency || 'EUR',
          method: 'billing'
        };
      } catch (billingError) {
        console.log('‚ö†Ô∏è Erreur avec /me/bill/balance:', billingError.message);
      }

      // M√©thode 3: Essayer les moyens de paiement
      try {
        const paymentMethods = await this.client.requestPromised('GET', '/me/payment/method');
        console.log('‚úÖ Moyens de paiement r√©cup√©r√©s:', paymentMethods.length);

        // Chercher un compte pr√©pay√©
        for (const methodId of paymentMethods) {
          try {
            const method = await this.client.requestPromised('GET', `/me/payment/method/${methodId}`);
            console.log(`M√©thode de paiement ${methodId}:`, method);
            if (method.paymentType === 'PREPAID_ACCOUNT' && method.balance !== undefined) {
              console.log('‚úÖ Solde trouv√© dans les moyens de paiement:', method);
              return {
                balance: parseFloat(method.balance || 0),
                currency: 'EUR',
                method: 'payment_method'
              };
            }
          } catch (methodError) {
            console.log(`‚ö†Ô∏è Erreur avec le moyen de paiement ${methodId}:`, methodError.message);
          }
        }
      } catch (paymentError) {
        console.log('‚ö†Ô∏è Erreur avec /me/payment/method:', paymentError.message);
      }

      // M√©thode 4: Essayer l'API des factures pour estimer le cr√©dit
      try {
        const bills = await this.client.requestPromised('GET', '/me/bill', {
          date: {
            from: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(), // 30 jours
            to: new Date().toISOString()
          }
        });

        console.log(`‚úÖ ${bills.length} factures r√©cup√©r√©es pour estimation`);

        // Calculer une estimation bas√©e sur les factures r√©centes
        let totalPaid = 0;
        let totalUsed = 0;

        for (const billId of bills.slice(0, 10)) { // Limiter √† 10 factures
          try {
            const bill = await this.client.requestPromised('GET', `/me/bill/${billId}`);
            if (bill.priceWithTax && bill.priceWithTax.value) {
              if (bill.priceWithTax.value > 0) {
                totalPaid += bill.priceWithTax.value;
              } else {
                totalUsed += Math.abs(bill.priceWithTax.value);
              }
            }
          } catch (billError) {
            console.log(`‚ö†Ô∏è Erreur avec la facture ${billId}:`, billError.message);
          }
        }

        const estimatedBalance = totalPaid - totalUsed;
        console.log(`üìä Estimation du solde: ${estimatedBalance}‚Ç¨ (pay√©: ${totalPaid}‚Ç¨, utilis√©: ${totalUsed}‚Ç¨)`);

        return {
          balance: Math.max(0, estimatedBalance), // Ne pas afficher de solde n√©gatif
          currency: 'EUR',
          method: 'estimated',
          estimated: true
        };

      } catch (billsError) {
        console.log('‚ö†Ô∏è Erreur avec /me/bill:', billsError.message);
      }

      // Si toutes les m√©thodes √©chouent
      console.log('‚ùå Impossible de r√©cup√©rer le solde par aucune m√©thode');
      return {
        balance: null,
        currency: 'EUR',
        method: 'failed',
        error: 'Impossible de r√©cup√©rer le solde. V√©rifiez les permissions de votre ConsumerKey.'
      };

    } catch (error) {
      console.error('‚ùå Erreur g√©n√©rale lors de la r√©cup√©ration du solde:', error);
      return {
        balance: null,
        currency: 'EUR',
        method: 'error',
        error: error.message
      };
    }
  }

  /**
   * Teste la connexion √† l'API OVH
   * @returns {Promise<Object>} - R√©sultat du test
   */
  async testConnection() {
    try {
      console.log('üîç Test de connexion OVH...');
      console.log('üìã Configuration:', {
        endpoint: 'ovh-eu',
        appKey: process.env.OVH_APP_KEY ? '‚úÖ D√©fini' : '‚ùå Manquant',
        appSecret: process.env.OVH_APP_SECRET ? '‚úÖ D√©fini' : '‚ùå Manquant',
        consumerKey: process.env.OVH_CONSUMER_KEY ? '‚úÖ D√©fini' : '‚ùå Manquant'
      });

      // V√©rifier que toutes les cl√©s sont pr√©sentes
      if (!process.env.OVH_APP_KEY || !process.env.OVH_APP_SECRET || !process.env.OVH_CONSUMER_KEY) {
        throw new Error('Cl√©s API OVH manquantes dans le fichier .env');
      }

      console.log('üîë Tentative d\'appel API /me...');
      const me = await this.client.requestPromised('GET', '/me');
      console.log('‚úÖ Connexion OVH r√©ussie pour:', me.nichandle);
      return {
        success: true,
        nichandle: me.nichandle,
        email: me.email,
        config: 'OK'
      };
    } catch (error) {
      console.error('‚ùå Erreur de connexion OVH d√©taill√©e:', {
        message: error.message,
        error: error.error,
        httpCode: error.httpCode,
        errorCode: error.errorCode,
        class: error.class
      });

      // Messages d'erreur plus explicites
      let errorMessage = error.message;
      if (error.httpCode === 403) {
        errorMessage = 'Acc√®s refus√© - V√©rifiez votre ConsumerKey et ses permissions';
      } else if (error.httpCode === 401) {
        errorMessage = 'Non autoris√© - V√©rifiez vos cl√©s APP_KEY et APP_SECRET';
      } else if (error.httpCode === 400) {
        errorMessage = 'Requ√™te invalide - ConsumerKey peut-√™tre expir√©';
      }

      return {
        success: false,
        error: errorMessage,
        details: {
          httpCode: error.httpCode,
          errorCode: error.errorCode,
          class: error.class
        }
      };
    }
  }
}

module.exports = OVHClient;
